{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Lumberjack <p>A lazy logging library.</p>"},{"location":"#features","title":"Features","text":"<p>This is a full logging library* with a build in way to log to console, file or any custom** place as well as optional extensions to send a log file via mail or show it on the device.</p> <p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#modules","title":"Modules","text":"Module Info Description Core <code>core</code>                  the core module - must always be included              Lumberjack <code>implementation-lumberjack</code>                  the main implementation of the logger - either this or the timber implementation must always be included              <code>logger-console</code>                   Optional                                a console logger for the lumberjack implementation              <code>logger-file</code>                   Optional                                a console logger for the lumberjack implementation              Extensions <code>extension-feedback</code>                   Optional                                an extension for easy email feedbacks              <code>extension-notification</code>                   Optional                                an extension for exception notification with easy email feedbacks on click              <code>extension-viewer</code>                   Optional                                a log viewer based on XML              <code>extension-composeviewer</code>                   Optional                                a compsoe log viewer              Timber <code>implementation-timber</code>                  the main implementation based on timber of the logger - either this or the lumberjack implementation must always be included              <code>timber-logger-console</code>                   Optional                                a console logger for the timber implementation              <code>timber-logger-file</code>                   Optional                                a file logger for the timber implementation"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module Android iOS JVM Info Core <code>core</code>                \u2714                             \u2714                             \u2714              Lumberjack <code>implementation-lumberjack</code>                \u2714                             -                             \u2714              <code>logger-console</code>                \u2714                             -                             \u2714              <code>logger-file</code>                \u2714                             \u2714                             \u2714              Extensions <code>extension-feedback</code>                \u2714                             -                             -              <code>extension-notification</code>                \u2714                             -                             -              <code>extension-viewer</code>                \u2714                             -                             -              <code>extension-composeviewer</code>                \u2714                             -                             \u2714              Timber <code>implementation-timber</code>                \u2714                             -                             \u2714              <code>timber-logger-console</code>                \u2714                             -                             \u2714              <code>timber-logger-file</code>                \u2714                             -                             \u2714              <ul> <li>iOS is mostly missing because the I use <code>ThreadLocal</code> and <code>StackTraceElement</code> inside the <code>implementation-lumberjack</code> module - those usages would need to be replaced for the iOS implementation - a pull request would be much appreciated!</li> <li>iOS is also missing a simple console logging function - a pull request would be much appreciated!</li> <li>the <code>extension-composeviewer</code> would support iOS immediately as soon as the above 2 points are integrated</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"custom-implementations/","title":"Custom Implementations","text":"<p>Info</p> <p>If you use the timber implementation check out the timber documentation!</p> <p>The lumberjack implementation allows you to create a custom logger by simple implementing a single function. Check out the implementation from the console logger below to get a good starting point for a custom logger.</p> library/Demo.kt<pre><code>val x = 0\nval y = 1\nval z = x + y\n</code></pre> <p>That's all. You can do the logging asynchronous as well if you want - just do whatever you want inside your logger implementation.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.7.0</code> Uses compose <code>1.7.1</code> and material3 <code>1.3.0</code> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental in material3 <code>1.3.0</code>. I will provide new versions as soon as possible if experimental APIs change or become stable.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Lumberjack <code>implementation-lumberjack</code> - <code>logger-console</code> - <code>logger-file</code> - Extensions <code>extension-feedback</code> FeedbackManager <code>2.0.1</code> <code>extension-notification</code> FeedbackManager <code>2.0.1</code> <code>extension-viewer</code> FeedbackManager FastScroller <code>2.0.1</code> <code>1.0.0</code> <code>extension-composeviewer</code> FeedbackManager <code>2.0.1</code> Timber <code>implementation-timber</code> Timber <code>4.7.1</code> <code>timber-logger-console</code> Timber <code>4.7.1</code> <code>timber-logger-file</code> Timber SLF4J logback-android <code>4.7.1</code> <code>2.0.7</code> <code>3.0.0</code>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>TODO...</p>"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val lumberjack = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.lumberjack:core:$lumberjack\")\n\n// if you want to use the LUMBERJACK logger\nimplementation(\"io.github.mflisar.lumberjack:implementation-lumberjack:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-console:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-file:$lumberjack\")\n\n// extensions that work with any implementation\nimplementation(\"io.github.mflisar.lumberjack:extension-feedback:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-notification:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-viewer:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-composeviewer:$lumberjack\")\n\n// if you want to use the TIMBER logger\nimplementation(\"io.github.mflisar.lumberjack:implementation-timber:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:timber-logger-console:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:timber-logger-file:$lumberjack\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\nlumberjack = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\nlumberjack-core =                      { module = \"io.github.mflisar.lumberjack:core\",                      version.ref = \"lumberjack\" }\n\n# if you want to use the LUMBERJACK logger\nlumberjack-implementation-lumberjack = { module = \"io.github.mflisar.lumberjack:implementation-lumberjack\", version.ref = \"lumberjack\" }\nlumberjack-logger-console =            { module = \"io.github.mflisar.lumberjack:logger-console\",            version.ref = \"lumberjack\" }\nlumberjack-logger-file =               { module = \"io.github.mflisar.lumberjack:logger-file\",               version.ref = \"lumberjack\" }\n\n# extensions that work with any implementation\nlumberjack-extension-feedback =        { module = \"io.github.mflisar.lumberjack:extension-feedback\",        version.ref = \"lumberjack\" }\nlumberjack-extension-notification =    { module = \"io.github.mflisar.lumberjack:extension-notification\",    version.ref = \"lumberjack\" }\nlumberjack-extension-viewer =          { module = \"io.github.mflisar.lumberjack:extension-viewer\",          version.ref = \"lumberjack\" }\nlumberjack-extension-composeviewer =   { module = \"io.github.mflisar.lumberjack:extension-composeviewer\",   version.ref = \"lumberjack\" }\n\n# if you want to use the TIMBER logger\nlumberjack-implementation-timber =     { module = \"io.github.mflisar.lumberjack:implementation-timber\",     version.ref = \"lumberjack\" }\nlumberjack-timber-logger-console =     { module = \"io.github.mflisar.lumberjack:timber-logger-console\",     version.ref = \"lumberjack\" }\nlumberjack-timber-logger-file =        { module = \"io.github.mflisar.lumberjack:timber-logger-file\",        version.ref = \"lumberjack\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.lumberjack.core)\n\n# if you want to use the LUMBERJACK logger\nimplementation(libs.lumberjack.implementation.lumberjack)\nimplementation(libs.lumberjack.logger.console)\nimplementation(libs.lumberjack.logger.file)\n\n# extensions that work with any implementation\nimplementation(libs.lumberjack.extension.feedback)\nimplementation(libs.lumberjack.extension.notification)\nimplementation(libs.lumberjack.extension.viewer)\nimplementation(libs.lumberjack.extension.composeviewer)\n\n# if you want to use the TIMBER logger\nimplementation(libs.lumberjack.implementation.timber)\nimplementation(libs.lumberjack.timber.logger.console)\nimplementation(libs.lumberjack.timber.logger.file)\n</code></pre> <p>Info</p> <p>Of course you can define the dependencies in any <code>.toml</code> file if you want but then you have to add it to your project and adjust the <code>libs.</code> accodingly.</p>"},{"location":"usage/","title":"Usage","text":"<p>Info</p> <p>Depending on your preferences you must decide yourself if you want to use the timber modules or the non timber modules. My suggestion is to prefer the non timber modules as those will save some space and will allow you to even log in a more flexible way. Despite that, all extensions work with any implementation (timber or non timber one).</p>"},{"location":"usage/#initialise-the-library","title":"Initialise the library","text":"Lumberjack VersionTimber Version <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n        // 1) install the implemantion\n        L.init(LumberjackLogger)\n\n        // 2) install loggers\n        L.plant(ConsoleLogger())\n        val setup = FileLoggerSetup.Daily.create(this)\n        L.plant(FileLogger(setup))\n    }\n\n}\n</code></pre> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n        // 1) install the implemantion\n        L.init(TimberLogger)\n\n        // 2) install loggers (trees) \n        Timber.plant(ConsoleTree())\n        val setup = FileLoggingSetup.DateFiles.create(this)\n        Timber.plant(FileLoggingTree(setup))\n    }\n\n}\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"<pre><code>// wherever you want use one of L.* functions for logging\n// all the functions are implemented as inline functions with lambdas - this means,\n// everything inside the lambda is only executed if the log is really ussed\n\nL.d { \"a debug log\" }\nL.e { \"a error log\" }\nL.e(e)\nL.e(e) { \"an exception log with an additonal message\" }\nL.v { \"TEST-LOG - Verbose log...\" }\nL.d { \"TEST-LOG - Debug log...\" }\nL.i { \"TEST-LOG - Info log...\" }\nL.w { \"TEST-LOG - Warn log...\" }\nL.e { \"TEST-LOG - Error log...\" }\nL.wtf { \"TEST-LOG - WTF log...\" }\n\n// optional tags work like following\nL.tag(\"LEVEL\").d { \"Tagged log message...\" }\n\n// you can log something optionally like following\nL.logIf { false }?.d { \"This will never be logged because logIf evaluates to false...\" }\n\n// manual log levels\nL.log(Level.DEBUG) { \"Debug level log via L.log instead of L.d\" }\n</code></pre>"},{"location":"usage/#filtering-logs","title":"Filtering Logs","text":"Lumberjack VersionTimber Version <pre><code>// typealias LumberjackFilter = (level: Level, tag: String?, time: Long, fileName: String, className: String, methodName: String, line: Int, msg: String?, throwable: Throwable?) -&gt; Boolean\nval filter = object : LumberjackFilter {\n    override fun invoke(\n        level: Level,\n        tag: String?,\n        time: Long,\n        fileName: String,\n        className: String,\n        methodName: String,\n        line: Int,\n        msg: String?,\n        throwable: Throwable?\n    ): Boolean {\n        // decide if you want to log this message...\n        return true\n    }\n}\n// the filter can then be attached to any logger implementation\nval consoleLogger = ConsoleLogger(filter = filter)\nval fileLogger = FileLogger(filter = filter)\n</code></pre> <p>Info</p> <p>The lumberjack implementation allows you more granular filter options as well as a custom filter for each logger implementation!</p> <pre><code>TimberLogger.filter = object: IFilter {\n    override fun isTagEnabled(baseTree: BaseTree, tag: String): Boolean {\n        // decide if you want to log this tag on this tree...\n        return true\n    }\n    override fun isPackageNameEnabled(packageName: String): Boolean {\n        // decide if you want to log if the log comes from a class within the provided package name\n        return true\n    }\n}\n</code></pre>"},{"location":"usage/#other-settings","title":"Other settings","text":"<pre><code>// if desired you can enable/disable all logs completely \n// e.g. in a release build like following \n// =&gt; you probably would want to do this inside the application after the init of Lumberjack\nL.enable(BuildConfig.DEBUG)\n\n// Alternatively every logger does support an enabled flag as well\nval consoleLogger = ConsoleLogger(enabled = BuildConfig.DEBUG)\nval fileLogger = FileLogger(enabled = !BuildConfig.DEBUG, ...)\n</code></pre>"},{"location":"modules/core/","title":"Core Module","text":""},{"location":"modules/extension-composeviewer/","title":"Extension Compose Viewer","text":"<p>If you use compose in your app you should use this viewer - it allows you to show log files directly inside your app.</p> <pre><code>val showLogViewer = rememberSaveable {\n    mutableStateOf(false)\n}\nLumberjackDialog(\n    visible = showLogViewer,\n    title = \"Logs\",\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    style = LumberjackViewDefaults.style(),\n    darkTheme = isSystemInDarkTheme(),\n    mail = null\n)\n</code></pre> <p>Alternatively you can always embed the view directly like following:</p> <pre><code>LumberjackView(\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    modifier = Modifier,\n    file = rememberLogFile(),\n    data = rememberLogFileData(),\n    state = rememberLazyListState(),\n    darkTheme = isSystemInDarkTheme(),\n    style = LumberjackViewDefaults.style(),\n    useScrollableLines = remember { mutableStateOf(false) }\n)\n</code></pre> <p>Tip</p> <p>You can also embed the whole dialog \"content view\" inside a layout if you want to also show the menu and use it's features</p> <pre><code>LumberjackDialogContent(\n    title = \"Logs\",\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    style= LumberjackViewDefaults.style(),\n    darkTheme = isSystemInDarkTheme(),\n    mail = null\n)\n</code></pre> Compose Viewer"},{"location":"modules/extension-feedback/","title":"Extension Feedback","text":"<p>Info</p> <p>This extension does only support android!</p> <p>This small extension simply allows you to send a log file via mail (no internet connection required). This will be done by sharing the file as email <code>Intent</code>.</p> <pre><code>L.sendFeedback(\n    context = context, \n    receiver = \"some.mail@gmail.com\",\n    attachments = listOfNotNull(&lt;file-logging-setup&gt;.getLatestLogFiles())  \n)\n</code></pre>"},{"location":"modules/extension-notification/","title":"Extension Notification","text":"<p>Info</p> <p>This extension does only support android!</p> <p>This small extension provides you with with a few functions to create notifications (for app testers or for the dev for example) that can be clicked and then will allow the user to send the log file to you via the <code>extension-feedback</code>. Or to open the log file by clicking the notification.</p> <pre><code>// shows a notifcation - on notification click the suer can do following:\n// * nothing\n// * send a mail with optional attachments like e.g. log files, database, whatever\n// * execute a custom action\nfun L.showNotification(\n    context: Context,\n    notificationIcon: Int,\n    notificationChannelId: String,\n    notificationId: Int,\n    notificationTitle: String = \"Rare exception found\",\n    notificationText: String = \"Please report this error by clicking this notification, thanks\",\n    clickHandler: NotificationClickHandler\n)\n\n// Click Handlers\n// here's a short overview of the available click handlers\nsealed class NotificationClickHandler {\n\n    class SendFeedback(\n        context: Context,\n        val receiver: String,\n        val subject: String = \"Exception found in ${context.packageName}\",\n        val titleForChooser: String = \"Send report with\",\n        val attachments: List&lt;File&gt; = emptyList()\n    ) : NotificationClickHandler()\n\n    class ClickIntent(\n        val intent: Intent,\n        val apply: ((builder: NotificationCompat.Builder) -&gt; Unit)? = null\n    ): NotificationClickHandler()\n\n    data object None: NotificationClickHandler()\n}   \n</code></pre>"},{"location":"modules/extension-viewer/","title":"Extension Viewer","text":""},{"location":"modules/extension-viewer/#viewer-extension","title":"Viewer Extension","text":"<p>Info</p> <p>This extension does only support android!</p> <pre><code>// show the log viewer activity (mail address is optional, \n// if it's null, the send mail entry will be removed from the viewers menu)\nL.showLog(\n    context, \n    fileLoggingSetup, \n    \"some.mail@gmail.com\"\n)\n</code></pre> Viewer"},{"location":"modules/implementation-lumberjack/","title":"Lumberjack Implementation","text":""},{"location":"modules/implementation-timber/","title":"Timber Implementation","text":"<p>Timber Support</p> <p>This library fully supports Jack Whartons Timber logging library (v4!). And was even based on it until Lumberjack v6. Beginning with v6 I wrote new modules that work without timber which leads to a smaller and more versitile non timber version. I would advice you to use the non timber versions but if you want to you can simply use the timber modules I provide as well - whatever you prefer.</p> Why did I move away from Timber? <p>I decided to not use <code>Timber</code> myself anymore because of following reasons:</p> <ul> <li><code>Timber</code> does explicitly rely on non lazy evaluating logging - it was a decision made by Jack Wharton and was the main reason to write <code>Lumberjack</code> at the beginning</li> <li><code>Timber</code> is restrictive regarding class extensions - in v5 I would need access to a field to continue supporting timber in <code>Lumberjack</code></li> <li><code>Timber</code> is considered as working and feature requests and/or pull requests are not accepted if not really necessary - like e.g. my minimal one here.</li> <li>additionally I always needed to extend the <code>BaseTree</code> from <code>Timber</code> because of the limiting restrictions of the default <code>BaseTree</code> as well as it was to restrictive to make adjustment in it ( I always had a nearly 1:1 copy of it inside my library here). This was needed to allow to adjust the stack trace depth so that <code>Lumberjack</code> will log the correct calling place as a wrapper around <code>Timber</code>.</li> </ul> <p>This lead to my final decision</p> <p><code>Lumberjack</code> does not need <code>Timber</code> and I provide a way to plug in <code>Timber</code> into <code>Lumberjack</code> now - this way using <code>Timber</code> and <code>Lumberjack</code> in combination is possible but not necessary anymore.</p>"},{"location":"modules/logger-console/","title":"Console Logger","text":""},{"location":"modules/logger-file/","title":"File Logger","text":""},{"location":"modules/timber-logger-console/","title":"Timber Console Logger","text":""},{"location":"modules/timber-logger-file/","title":"Timber File Logger","text":""}]}